fn square(n: i32) -> i32 {
    mut result = 0;
    mut i = 0;
    while i < n {
        result = result + n;
        i = i + 1;
    }
    result
}

fn weight(n: i32) -> i32 {
    n
}

fn weighted_sum_squares() -> i32 {
    mut lst = [1, 2, 3];
    mut sum = 0;
    mut i = 0;
    while i < 3 {
        mut sq = square(lst[i]);
        mut w = weight(lst[i]);
        mut prod = 0;
        mut j = 0;
        while j < w {
            prod = prod + sq;
            j = j + 1;
        }
        sum = sum + prod;
        i = i + 1;
    }
    sum
}

fn main() -> i32 {
    compeval weighted_sum_squares()
}
